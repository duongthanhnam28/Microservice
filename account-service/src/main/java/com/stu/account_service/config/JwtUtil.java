package com.stu.account_service.config;

import com.stu.account_service.entity.Permission;
import com.stu.account_service.entity.RefreshToken;
import com.stu.account_service.entity.Role;
import com.stu.account_service.entity.User;
import com.stu.account_service.exception.AppException;
import com.stu.account_service.exception.ErrorCode;
import com.stu.account_service.repository.BlacklistTokenRepository;
import com.stu.account_service.repository.RefreshTokenRepository;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.crypto.SecretKey;

@Slf4j
@Component
public class JwtUtil {

    @Value("${jwt.secret-key}")
    private String secretKey;

    @Value("${jwt.expiration}")
    private long jwtExpiration;

    @Value("${jwt.refresh-expiration}")
    private long refreshExpiration;

    private final String secret = "yourSecretKeyWithAtLeast32Characters!"; // N√™n >=32 k√Ω t·ª±
    private final SecretKey key = Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8));

    public String generateToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("tokenType", "access");
        return buildToken(claims, user, jwtExpiration);
    }

    public String generateRefreshToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("tokenType", "refresh");
        return buildToken(claims, user, refreshExpiration);
    }

    private String buildToken(Map<String, Object> extraClaims, User user, long expiration) {
        extraClaims.put("userId", user.getId());

        if ("access".equals(extraClaims.get("tokenType"))) {
            extraClaims.put("roles", user.getRoles().stream().map(Role::getName).collect(Collectors.toList()));
            extraClaims.put("permissions", user.getRoles().stream()
                    .flatMap(role -> role.getPermissions().stream())
                    .map(Permission::getName)
                    .collect(Collectors.toList()));
        }

        return Jwts.builder()
                .setClaims(extraClaims)
                .setSubject(user.getUsername())
                .setId(generateJti())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    public String generateJti() {
        return UUID.randomUUID().toString();
    }

    public boolean isTokenValid(String token, User user, BlacklistTokenRepository blacklistRepo) {
        try {
            if (!isTokenContentValid(token, user)) {
                log.debug("‚ùå Token content invalid: username or userId mismatch");
                return false;
            }

            if (isTokenExpired(token)) {
                log.debug("‚ùå Token expired at: {}", extractExpiration(token));
                return false;
            }

            if (!isUserAccountValid(user)) {
                log.debug("‚ùå User account invalid: {}", user.getUsername());
                return false;
            }

            if (isTokenBlacklisted(token, blacklistRepo)) {
                log.debug("‚ùå Token is blacklisted: {}", hashToken(token));
                return false;
            }

            if (!isJtiPresent(token)) {
                log.debug("‚ùå Missing JTI in token");
                return false;
            }

            log.debug("‚úÖ Token is valid for user: {}", user.getUsername());
            return true;

        } catch (Exception e) {
            log.error("‚ùå Token validation failed: {}", e.getMessage(), e);
            return false;
        }
    }

    /*
         H√†m ki·ªÉm tra m·ªôt refresh token c√≥ h·ª£p l·ªá hay kh√¥ng b·∫±ng c√°ch:
        Gi·∫£i m√£ token ƒë·ªÉ l·∫•y c√°c th√¥ng tin (claims).
        Ki·ªÉm tra token c√≥ ph·∫£i lo·∫°i "refresh" kh√¥ng.
        Ki·ªÉm tra token c√≥ ƒë√∫ng user kh√¥ng (username v√† userId kh·ªõp).
        Ki·ªÉm tra token ch∆∞a h·∫øt h·∫°n.
        Ki·ªÉm tra t√†i kho·∫£n user c√≤n h·ª£p l·ªá (ch∆∞a b·ªã kh√≥a/v√¥ hi·ªáu).
        Ki·ªÉm tra trong database:
        Token t·ªìn t·∫°i.
        Ch∆∞a b·ªã thu h·ªìi (isRevoked = false).
        Ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng (usedAt = null).
        üëâ N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu ƒë√∫ng ‚Üí tr·∫£ v·ªÅ true. Ng∆∞·ª£c l·∫°i ‚Üí false.
     */
    public boolean isRefreshTokenValid(String token, User user, RefreshTokenRepository repo) {
        try {
            Claims claims = extractAllClaims(token);

            if (!"refresh".equals(claims.get("tokenType", String.class))) {
                log.debug("‚ùå Token is not a refresh token");
                return false;
            }

            if (!Objects.equals(claims.getSubject(), user.getUsername())
                    || !Objects.equals(claims.get("userId", Long.class), user.getId())) {
                log.debug("‚ùå Refresh token user mismatch");
                return false;
            }

            if (claims.getExpiration().before(new Date())) {
                log.debug("‚ùå Refresh token expired at: {}", claims.getExpiration());
                return false;
            }

            if (!isUserAccountValid(user)) {
                log.debug("‚ùå User account invalid");
                return false;
            }

            String jti = claims.getId();
            Optional<RefreshToken> entityOpt = repo.findByJti(jti);
            if (entityOpt.isEmpty()) {
                log.debug("‚ùå Refresh token JTI not found in DB: {}", jti);
                return false;
            }

            RefreshToken entity = entityOpt.get();
            if (entity.isRevoked()) {
                log.debug("‚ùå Refresh token is revoked");
                return false;
            }

            if (entity.getUsedAt() != null) {
                log.debug("‚ùå Refresh token already used at: {}", entity.getUsedAt());
                return false;
            }

            log.debug("‚úÖ Refresh token is valid");
            return true;

        } catch (Exception e) {
            log.error("‚ùå Refresh token validation failed: {}", e.getMessage(), e);
            return false;
        }
    }

    public String extractTokenType(String token) {
        return extractAllClaims(token).get("tokenType", String.class);
    }

    public boolean isTokenExpired(String token) {
        Date expiration = extractExpiration(token);
        boolean expired = expiration.before(new Date());
        if (expired) {
            log.debug("‚ùå Token is expired at: {}", expiration);
        }
        return expired;
    }

    private boolean isTokenContentValid(String token, User user) {
        String tokenUsername = extractUsername(token);
        Long tokenUserId = extractUserId(token);
        boolean match = Objects.equals(tokenUsername, user.getUsername()) &&
                Objects.equals(tokenUserId, user.getId());

        if (!match) {
            log.debug("‚ùå Token content mismatch: tokenUsername={}, user.username={}, tokenUserId={}, user.id={}",
                    tokenUsername, user.getUsername(), tokenUserId, user.getId());
        }

        return match;
    }

    private boolean isUserAccountValid(User user) {
        return user.isEnabled() && user.isAccountNonLocked() && user.isAccountNonExpired();
    }

    private boolean isTokenBlacklisted(String token, BlacklistTokenRepository repo) {
        String hash = hashToken(token);
        boolean blacklisted = repo.existsByToken(hash);

        if (blacklisted) {
            log.debug("‚ùå Token is blacklisted. Hash: {}", hash);
        }

        return blacklisted;
    }

    private boolean isJtiPresent(String token) {
        String jti = extractJti(token);
        boolean present = jti != null && !jti.isEmpty();

        if (!present) {
            log.debug("‚ùå Token missing JTI.");
        }

        return present;
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Long extractUserId(String token) {
        return extractClaim(token, claims -> claims.get("userId", Long.class));
    }

    public String extractJti(String token) {
        return extractClaim(token, Claims::getId);
    }

    public List<String> extractRoles(String token) {
        return extractClaim(token, claims -> claims.get("roles", List.class));
    }

    public List<String> extractPermissions(String token) {
        return extractClaim(token, claims -> claims.get("permissions", List.class));
    }

    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> resolver) {
        final Claims claims = extractAllClaims(token);
        return resolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        try {
            return Jwts.parser().setSigningKey(key).build().parseClaimsJws(token).getBody();
        } catch (ExpiredJwtException e) {
            log.error("‚ùå Token expired: {}", e.getMessage(), e);
            throw new AppException(ErrorCode.TOKEN_EXPIRED);
        } catch (MalformedJwtException e) {
            log.error("‚ùå Malformed JWT token: {}", e.getMessage(), e);
            throw new AppException(ErrorCode.INVALID_TOKEN);
        } catch (JwtException e) {
            log.error("‚ùå JWT validation failed: {}", e.getMessage(), e);
            throw new AppException(ErrorCode.INVALID_TOKEN);
        }
    }

    public String hashToken(String token) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(token.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(hash);
        } catch (NoSuchAlgorithmException e) {
            throw new AppException(ErrorCode.HASH_TOKEN_FAILED);
        }
    }

    private Key getSignKey() {
        byte[] keyBytes = hexStringToByteArray(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    private byte[] hexStringToByteArray(String hex) {
        int len = hex.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        return data;
    }

    public long getJwtExpiration() {
        return jwtExpiration;
    }

    public long getRefreshExpiration() {
        return refreshExpiration;
    }
}
